@model LoginViewModel

@inject Authentication.IdentityServer.Settings.ICallbackSettings CallbackSettings
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration

@using Microsoft.IdentityModel.Tokens

@{
    ViewData["Title"] = "Authentication";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="login-page">
    <div class="lead">
        <p style="text-align: center">
            <img src="~/ogo_digiAuthen_2.png" width="250" height="190"
                 alt="" />
        </p>
    </div>

    <partial name="_ValidationSummary" />

    @if (Model.EnableLocalLogin)
    {
        @if (!String.IsNullOrEmpty(Model.QrCode) && !String.IsNullOrEmpty(Model.QrToken))
        {
            var deReturnUrl = Base64UrlEncoder.Decode(Model.ReturnUrl);
            <div style="text-align:center">
                <div class="card-body">
                    <h3 style="text-align:center">Scan QR Code</h3>
                    <br />
                    <div class="text-center">
                        <img src=@Model.QrCode style="width:20%">
                        <br /><br />
                        <div>
                            <span>QR Code is valid for </span><span id="sec"></span><span> seconds</span>
                        </div>
                    </div>
                </div>
                <div class="text-center">
                    <a style="color:gold" href="@Url.Action("BasicAuthen", "Account", new { ReturnUrl = deReturnUrl })" onclick="getInputValue();">Login by Staff Account</a>
                </div>
            </div>

            <script type="text/javascript">
                    let qrToken = "@Model.QrToken";
                    let url = "@CallbackSettings.Token_request";
                    let t = setInterval(function () {
                        let token = parseJwt(qrToken);
                        fetch(url + qrToken)
                            .then((e) => e.json())
                            .then(function (e) {
                                if (!e.success) {
                                    window.location.reload()

                                }

                                if (e.data.status === "used") {
                                    var user = e.data.username
                                    window.location = '@Url.Action("LoginFido", "Account")?data=' + user + "|" + "@Model.ReturnUrl" + "|" + "@Model.RememberLogin" + "|" + qrToken;
                                }

                            })

                        $("#sec").text(Math.floor(((token.exp) - (new Date() / 1000)) + 2));
                    }, 1000)

                    function parseJwt(token) {
                        var base64Url = token.split('.')[1];
                        var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                        var jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {
                            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
                        }).join(''));

                        return JSON.parse(jsonPayload);
                    };
            </script>

            <p id="show_spiner"></p>
            <script>
                function getInputValue() {
                    document.getElementById("show_spiner").innerHTML = "<div class=\"loading\"></div>";
                }
            </script>
        }

    }

    @if (!Model.EnableLocalLogin && !Model.VisibleExternalProviders.Any())
    {
        <div class="alert alert-warning">
            <strong>Invalid login request</strong>
            There are no login schemes configured for this request.
        </div>
    }
</div>

@section Scripts {
    <script src="https://www.google.com/recaptcha/api.js?render=@Configuration["googleReCaptcha:SiteKey"]"></script>
    <script>
        grecaptcha.ready(function() {
            window.grecaptcha.execute('@Configuration["googleReCaptcha:SiteKey"]', { action: 'home' }).then(function (token) {
                $("#captchaInput").val(token);
            });
        });
    </script>
}